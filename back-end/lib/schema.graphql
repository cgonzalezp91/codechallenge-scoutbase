type Movies {
    _id: String,
    title: String!,
    year: Int,
    rating: Float,
    actors: [Actors]
}

interface Person { #Actors and Directors Share same type of info so i did a Person Type with an interface
    name: String!,
    birthday: String,
    country: String,
}

type Actors implements Person {
    _id: ID
    name: String!,
    birthday: String,
    country: String,
    directors: [Directors]
}

type Directors implements Person {    
    name: String!,
    birthday: String,
    country: String
}

type User {
    _id: String!,
    name: String,
    password: String
}

type SigninPayload {
    token: String!
    user: User
}

type Query {
    "Get all the Movies"
    movies: [Movies]
    "Get all the Actors"
    getPeople: [Person]
    # "Get all the Directors"
    # getDirectors: [Person]
}
input UserInput{
    _id: String,
    username: String,
    password: String
}

type Mutation {
    "Create a User"
    createUser(input: UserInput!): SigninPayload!
    "User Login"
    login(input: UserInput!): SigninPayload!
}